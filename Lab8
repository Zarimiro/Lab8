#include <windows.h>
#include "resource.h"
#include "stdafx.h""

LRESULT CALLBACK WinFun(HWND, UINT, WPARAM, LPARAM);
TCHAR WinName[] = "Window"; 
int WINAPI WinMain(HINSTANCE hIns, HINSTANCE hPrevIns, LPSTR arg, int WinMode)
{
	HWND hwnd; 
	MSG msg; 
	WNDCLASSEX wcl; 
					
	wcl.hInstance = hIns; 
	wcl.lpszClassName = WinName; 
	wcl.lpfnWndProc = WinFun; 
	wcl.style = 0;
	wcl.cbSize = sizeof(WNDCLASSEX); 
	wcl.hIcon = LoadIcon(NULL, IDI_APPLICATION); 
	wcl.hIconSm = LoadIcon(NULL, IDI_WINLOGO); 
	wcl.hCursor = LoadCursor(NULL, IDC_ARROW); 
	wcl.lpszMenuName = NULL; 
	wcl.cbClsExtra = 0; 
	wcl.cbWndExtra = 0;
	wcl.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
	if (!RegisterClassEx(&wcl)) return 0;
	hwnd = CreateWindow(
		WinName, 
		"Window", 
		WS_OVERLAPPEDWINDOW, 
		CW_USEDEFAULT, 
		CW_USEDEFAULT, 
		CW_USEDEFAULT, 
		CW_USEDEFAULT, 
		HWND_DESKTOP, 
		NULL, 
		hIns, 
		NULL); 
	ShowWindow(hwnd, WinMode);
	UpdateWindow(hwnd);
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return msg.wParam;
}

struct coord
{
	int x1, x2, y1, y2;
};

struct List 
{
	coord c;
	List *pNext;
};

List *pFirst = 0, *p;

int x1, x2, y1, y2;
HPEN pB;
HBRUSH pH;
LRESULT CALLBACK WinFun(HWND hwnd, UINT message,
	WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;

	switch (message)
	{	
	case WM_MOUSEMOVE:
		if (wParam & MK_RBUTTON) 
		{
			int x, y;
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			hdc = GetDC(hwnd);
			pH = CreateHatchBrush(HS_HORIZONTAL, RGB(255, 255, 0));
			pB = CreatePen(PS_DASHDOTDOT, NULL, RGB(0, 255, 0));
			SelectObject(hdc, pH);
			SelectObject(hdc, pB);
			Ellipse(hdc, x-50, y-50, x+50, y+50);
			DeleteObject(pH);
			DeleteObject(pB);
			ReleaseDC(hwnd, hdc);
		}
		EndPaint(hwnd, &ps);
		break;
	case WM_PAINT: 
		hdc = BeginPaint(hwnd, &ps);
		p = pFirst;
		while (p)
		{
			SelectObject(hdc, pH);
			SelectObject(hdc, pB);
			MoveToEx(hdc, p->c.x1, p->c.y1, (LPPOINT)NULL);

			p = p->pNext;
		}
		EndPaint(hwnd, &ps);
		break;


	case WM_DESTROY:
		PostQuitMessage(0);
		break;


	default:
		
		return DefWindowProc(hwnd, message, wParam, lParam);
	}
	return 0;
}
